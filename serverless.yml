service: ${env:SERVICE_NAME}

plugins:
  - serverless-dynamodb-local
  - serverless-webpack
  - serverless-offline

custom:
  webpackIncludeModules: true
  dynamodb:
    start:
      port: 9000
      inMemory: true
      migrate: true
    migration:
      dir: tests/dynamodb/migrations

provider:
  name: aws
  runtime: nodejs6.10
  region: ${env:AWS_REGION}
  stage: ${env:STAGE}
  role: oauthLambdaRole
  stackTags:
    KeboolaStack: ${env:KEBOOLA_STACK}
  environment:
    KEBOOLA_STACK: ${env:KEBOOLA_STACK}
    AWS_REGION: ${env:AWS_REGION}
    SERVICE_NAME: ${env:SERVICE_NAME}
    STAGE: ${env:STAGE}
    KBC_URL: ${env:KBC_URL}

#package:
#  individually: true
#  include:
#    - src/app/**
#    - src/lib/**
#    - src/functions/**
#    - node_modules/**
#  exclude:
#    - .git/**
#    - .idea/**
#    - .codeclimate.yml
#    - .env
#    - .eslintignore
#    - .eslintrc.json
#    - .travis.yml
#    - apiary.apib
#    - docker-compose.yml
#    - Dockerfile
#    - LICENSE
#    - README.md
#    - package.json
#    - yarn.lock
#    - scripts/**
#    - tests/**

functions:
  authorize:
    handler: src/functions/authorize.handler
    tags:
      KeboolaStack: ${env:KEBOOLA_STACK}
    events:
      - http:
          method: get
          path: "/authorize/{componentId}"
      - http:
          method: post
          path: "/authorize/{componentId}"
      - http:
          method: get
          path: "/authorize/{componentId}/callback"
  consumers:
    handler: src/functions/consumers.handler
    tags:
      KeboolaStack: ${env:KEBOOLA_STACK}
    events:
      - http:
          method: get
          path: "/manage"
      - http:
          method: post
          path: "/manage"
      - http:
          method: get
          path: "/manage/{componentId}"
      - http:
          method: delete
          path: "/manage/{componentId}"

resources:
  Resources:
    consumers:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: consumers
        AttributeDefinitions:
          - AttributeName: component_id
            AttributeType: S
        KeySchema:
          - AttributeName: component_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    credentials:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: credentials
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    sessions:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: sessions
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    oauthLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: "${env:SERVICE_NAME}-lambda-role"
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
        Policies:
          - PolicyName: "${env:SERVICE_NAME}-lambda-policy"
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:${env:AWS_REGION}:${env:ACCOUNT_ID}:log-group:/aws/lambda/*:*:*"
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DetachNetworkInterface
                    - ec2:DeleteNetworkInterface
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                  Resource: "*"
