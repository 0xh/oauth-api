service: ${env:SERVICE_NAME}

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

custom:
  webpackIncludeModules: true
  kmsAlias: "alias/${env:SERVICE_NAME}-${env:STAGE}"
  dynamodb:
    tables:
      consumers: "${env:SERVICE_NAME}-${env:STAGE}_consumers"
      credentials: "${env:SERVICE_NAME}-${env:STAGE}_credentials"
      sessions: "${env:SERVICE_NAME}-${env:STAGE}_sessions"
    start:
      port: 9000
      inMemory: true

provider:
  name: aws
  runtime: nodejs6.10
  region: ${env:REGION}
  stage: ${env:STAGE}
  role: oauthLambdaRole
  stackTags:
    KeboolaStack: ${env:KEBOOLA_STACK}
  environment:
    KEBOOLA_STACK: ${env:KEBOOLA_STACK}
    REGION: ${env:REGION}
    AWS_KMS_KEY_ID: ${self:custom:kmsAlias}
    SERVICE_NAME: ${env:SERVICE_NAME}
    STAGE: ${env:STAGE}
    KBC_URL: ${env:KBC_URL}
    SESSION_COOKIE_NAME: ${env:SESSION_COOKIE_NAME}
    SESSION_HASH_PREFIX: ${env:SESSION_HASH_PREFIX}
    REDIRECT_URI_BASE:
      Fn::Join:
        - ""
        - - "https://"
          - Ref: ApiGatewayRestApi
          - ".execute-api."
          - Ref: AWS::Region
          - ".amazonaws.com"
          - "/"
          - ${env:STAGE}

package:
  individually: true
  include:
    - src/app/**
    - src/lib/**
    - src/functions/**
    - node_modules/**
  exclude:
    - .git/**
    - .idea/**
    - .codeclimate.yml
    - .env
    - .eslintignore
    - .eslintrc.json
    - .travis.yml
    - apiary.apib
    - docker-compose.yml
    - Dockerfile
    - LICENSE
    - README.md
    - package.json
    - yarn.lock
    - scripts/**
    - tests/**

functions:
  authorize:
    handler: src/functions/authorize.handler
    tags:
      KeboolaStack: ${env:KEBOOLA_STACK}
    events:
      - http:
          method: get
          path: "/authorize/{componentId}"
      - http:
          method: post
          path: "/authorize/{componentId}"
      - http:
          method: get
          path: "/authorize/{componentId}/callback"

  consumers:
    handler: src/functions/consumers.handler
    tags:
      KeboolaStack: ${env:KEBOOLA_STACK}
    events:
      - http:
          method: get
          path: "/manage"
      - http:
          method: post
          path: "/manage"
      - http:
          method: get
          path: "/manage/{componentId}"
      - http:
          method: patch
          path: "/manage/{componentId}"
      - http:
          method: delete
          path: "/manage/{componentId}"
  credentials:
    handler: src/functions/credentials.handler
    tags:
      KeboolaStack: ${env:KEBOOLA_STACK}
    events:
      - http:
          method: get
          path: "/credentials/{componentId}"
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-StorageApi-Token
            allowCredentials: false
      - http:
          method: post
          path: "/credentials/{componentId}"
      - http:
          method: get
          path: "/credentials/{componentId}/{name}"
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-StorageApi-Token
            allowCredentials: false
      - http:
          method: delete
          path: "/credentials/{componentId}/{name}"

resources:
  Resources:
    consumers:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "${self:custom.dynamodb.tables.consumers}"
        AttributeDefinitions:
          - AttributeName: component_id
            AttributeType: S
        KeySchema:
          - AttributeName: component_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    credentials:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "${self:custom.dynamodb.tables.credentials}"
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    sessions:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "${self:custom.dynamodb.tables.sessions}"
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    oauthLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: "${env:SERVICE_NAME}-${env:STAGE}-lambda-role"
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
        Policies:
          - PolicyName: "${env:SERVICE_NAME}-${env:STAGE}-lambda-policy"
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    Fn::Join:
                      - ":"
                      - - "arn:aws:logs"
                        - Ref: AWS::Region
                        - Ref: AWS::AccountId
                        - "log-group:/aws/lambda/*:*:*"

                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DetachNetworkInterface
                    - ec2:DeleteNetworkInterface
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                  Resource:
                    - Fn::Join:
                        - ":"
                        - - "arn:aws:dynamodb"
                          - Ref: AWS::Region
                          - Ref: AWS::AccountId
                          - "table/${self:custom.dynamodb.tables.consumers}"
                    - Fn::Join:
                        - ":"
                        - - "arn:aws:dynamodb"
                          - Ref: AWS::Region
                          - Ref: AWS::AccountId
                          - "table/${self:custom.dynamodb.tables.credentials}"
                    - Fn::Join:
                        - ":"
                        - - "arn:aws:dynamodb"
                          - Ref: AWS::Region
                          - Ref: AWS::AccountId
                          - "table/${self:custom.dynamodb.tables.sessions}"
    oauthKmsKey:
      Type: AWS::KMS::Key
      Properties:
        Description: "OAuth API KMS key"
        KeyPolicy:
          Version: "2012-10-17"
          Statement:
            Sid: "Allow administration of the key in IAM"
            Effect: "Allow"
            Principal:
              AWS:
                Fn::Join:
                  - ""
                  - - "arn:aws:iam::"
                    - Ref: AWS::AccountId
                    - ":user/"
                    - ${env:USER_NAME}
            Action: "kms:*"
            Resource: "*"
    oauthKmsKeyAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: ${self:custom:kmsAlias}
        TargetKeyId:
          Ref: oauthKmsKey
